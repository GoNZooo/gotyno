struct Recruiter {
    name: String
}

struct Person {
    name: String
    age: U8
    efficiency: F32
    on_vacation: Boolean
    hobbies: []String
    last_fifteen_comments: [15]String
    recruiter: Recruiter
    spouse: Maybe<Person>
}

struct LogInData {
    username: String
    password: String
}

struct UserId {
    value: String
}

struct Channel {
    name: String
    private: Boolean
}

struct Email {
    value: String
}

union Event {
    LogIn: LogInData
    LogOut: UserId
    JoinChannels: []Channel
    SetEmails: [5]Email
}

union Maybe <T>{
    Nothing
    Just: T
}

union Either <L, R>{
    Left: L
    Right: R
}

enum StillSize {
    w92 = "w92"
    w185 = "w185"
    w300 = "w300"
    h632 = "h632"
    original = "original"
}

enum BackdropSize {
    w300 = "w300"
    w780 = "w780"
    w1280 = "w1280"
    original = "original"
}

struct ImageConfigurationData {
    base_url: String
    secure_base_url: String
    still_sizes: []StillSize
    backdrop_sizes: []BackdropSize
}

struct ConfigurationData {
    images: ImageConfigurationData
    change_keys: []String
}

struct KnownForMovie {
    media_type: "movie"
    poster_path: ?String
    id: U32
    title: ?String
    vote_average: F32
    release_date: ?String
    overview: String
}

struct KnownForShow {
    media_type: "tv"
    poster_path: ?String
    id: U32
    vote_average: F32
    overview: String
    first_air_date: ?String
    name: ?String
}

untagged union KnownFor {
    KnownForShow
    KnownForMovie
}
